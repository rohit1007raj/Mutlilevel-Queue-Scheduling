#include<stdio.h>
#include<conio.h>
struct times
{
       int p,art,but,wtt,tat,rnt;
};

void sortart(struct times a[],int pro)
{
       int i,j;
       struct times temp;
       for(i=0;i<pro;i++)
       {
              for(j=i+1;j<pro;j++)
              {
                     if(a[i].art > a[j].art)
                     {
                           temp = a[i];
                           a[i] = a[j];
                           a[j] = temp;
                     }
              }
       }
       return;
}




void fcfs()
{
	
	int i,k,time=0;
	struct times b[100];
	printf("FCFS Scheduling Algorithm\n");
	printf("Enter number of processes: ");
	scanf("%d",&k);
	for(i=0;i<k;i++)
	{
	printf("Enter arrival time and burst time for the process P%d :",i);
	scanf("%d %d",&b[i].art,&b[i].but);
	b[i].p = i;
	}
	sortart(b,k);
	printf("\n***************************************\n");
       printf("Gantt Chart\n");
       printf("0");
    for(i=0;i<k;i++)
    {
    	time=time+b[i].but;
    	printf(" -> [P%d] <- %d",b[i].p,time);
	}
}


void roundrobin(){
	int i,j,pro,time,remain,flag=0,ts;
       struct times a[100];
       float avgwt=0,avgtt=0;
       printf("Round Robin Scheduling Algorithm\n");
       printf("Note -\n1. Arrival Time of at least on process should be 0\n2. CPU should never be idle\n");
       printf("Enter Number Of Processes : ");
       scanf("%d",&pro);
       remain=pro;
       for(i=0;i<pro;i++)
       {
              printf("Enter arrival time and Burst time for Process P%d : ",i);
              scanf("%d%d",&a[i].art,&a[i].but);
              a[i].p = i;
              a[i].rnt = a[i].but;
       }
       sortart(a,pro);
       printf("Enter Time Slice OR Quantum Number : ");
       scanf("%d",&ts);
       printf("\n***************************************\n");
       printf("Gantt Chart\n");
       printf("0");
       for(time=0,i=0;remain!=0;)
       {
              if(a[i].rnt<=ts && a[i].rnt>0)
              {
                     time = time + a[i].rnt;
                     printf(" -> [P%d] <- %d",a[i].p,time);
                     a[i].rnt=0;
                     flag=1;
              }
              else if(a[i].rnt > 0)
              {
                     a[i].rnt = a[i].rnt - ts;
                     time = time + ts;
                     printf(" -> [P%d] <- %d",a[i].p,time);
              }
              if(a[i].rnt==0 && flag==1)
              {
                     remain--;
                     flag=0;
              }
              if(i==pro-1)
                     i=0;
              else if(a[i+1].art <= time)
                     i++;
              else
                     i=0;
}
}
int main()
{
	int bt[10],p[10],at[10],priority[10],n,i,Q1,Q2,Q3,range1,range2,range3,range4,range5,range6;
	/*printf("Enter total number of process:");
	scanf("%d",&n);
	printf("\nEnter Arrival Time,Burst Time and Priority of the processes\n");
	for(i=0;i<n;i++)
	{
		printf("\nP[%d]\n",i+1);
		printf("Arrival Time:");
		scanf("%d",&at[i]);
		printf("Burst Time:");
		scanf("%d",&bt[i]);
		printf("Priority:");
		scanf("%d",&priority[i]);
		p[i]=i+1;
	}
	printf("Enter the priority range of Queue 1 =");
	scanf("%d %d",&range1,&range2);
	printf("Enter the priority range of Queue 2 =");
	scanf("%d %d",&range3,&range4);
	printf("Enter the priority range of Queue 3 =");
	scanf("%d %d",&range5,&range6);
	printf("\nPROCESS\t\t ARRIVAL TIME \tBURST TIME\tPRIORITY\t");
	for(i=0;i<n;i++)  
	printf("\n%d \t\t %d \t\t %d \t\t %d ",p[i],at[i],bt[i],priority[i]);
	roundrobin();*/
	roundrobin();
	
	getch();
	return(0);

}
